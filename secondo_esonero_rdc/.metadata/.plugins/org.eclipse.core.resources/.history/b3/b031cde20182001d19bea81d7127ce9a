/*
 ============================================================================
 Name        : c.c
 Author      : Belisario Cappiello
 Version     :
 Copyright   : Your copyright notice
 Description : Hello World in C, Ansi-style
 ============================================================================
 */

#if defined WIN32
	#include <winsock2.h>
#else
	#define closesocket close
	#include <sys/socket.h>
	#include <arpa/inet.h>
	#include <unistd.h>
	#include <netdb.h>
#endif

#include <stdio.h>
#include <stdlib.h>
#include <Windows.h>
#include <ctype.h>

#define ECHOMAX 255
#define PROTOPORT 60001
#define NO_ERROR 0
#define DEFAULT_ADDRESS "127.0.0.1"

void errorHandler(char *);
void clearWinSock();
int isNumber(char *);
int checkChar(char *);
void tokenizer(char * token[4], char *);

int main(int argc, char *argv[]) {

	struct hostent * server_host;
	char * host_addr;
	char * host_name;
	char serv_name[ECHOMAX];
	int port;

	if (argc != 2){
		host_name = strtok(argv[1], ":");
		strcpy(serv_name, host_name);
		port = atoi(strtok(NULL, ":"));
		server_host = gethostbyname(host_name);
		host_addr = server_host->h_addr_list[0];
	}else{
		port = PROTOPORT;
		host_addr = DEFAULT_ADDRESS;
		if (port < 0){
			printf("%d is a bad port number\n", port);
			return 0;
		}
	}

	printf("%s\n", host_name);

	#if defined WIN32
		WSADATA wsa_data;
		int result = WSAStartup(MAKEWORD(2, 2), &wsa_data);
		if (result != NO_ERROR){
			printf("%s\n", "Start up failed");
			return -1;
		}
		printf("%s\n", "Start up done correctly");
	#endif

	int socket_udp;
	socket_udp = socket(PF_INET, SOCK_DGRAM, IPPROTO_UDP);
	if(socket_udp < NO_ERROR){
		errorHandler("Socket creation failed");
		closesocket(socket_udp);
		clearWinSock();
		return -1;
	}
	printf("%s\n", "Socket created successfully");

	struct sockaddr_in server_address;
	unsigned int server_address_size;
	server_address_size = sizeof(server_address);
	memset(&server_address, 0, server_address_size);
	server_address.sin_family = PF_INET;
	server_address.sin_port = htons(port);
	server_address.sin_addr.s_addr = inet_addr(host_addr);

	struct sockaddr_in response_address;
	int response_address_size;

	char * send_string = malloc(sizeof(char) * ECHOMAX);
	int send_string_len;

	char * receive_string = malloc(sizeof(char) * ECHOMAX);

	while(1){
		memset(send_string, 0, ECHOMAX);
		printf("%s", "The server can do mathematical operations with integer numbers.\nThe options are:\n1. + for addition\n2. - for subtraction\n3. x for multiplication\n4. / for division\n");
		printf("%s\n", "If you want to close the connection, please enter only '=' character");
		printf("%s ", "Insert the operand and two numbers separated by a space\nThe server will send back the result -> ");
		fgets(send_string, ECHOMAX-1, stdin); //get the input string with size limit

		send_string_len = strlen(send_string);

		if(send_string_len > ECHOMAX){
			errorHandler("The string is too big");
			system("CLS");
			continue;
		}
		// Remove the newline char, if there's one
		if ((send_string_len > 0) && (send_string[send_string_len - 1] == '\n'))
		{
			send_string[send_string_len - 1] = '\0';
		}

		char ** string_tokens = malloc(sizeof(char*) * 4);
		char input_string_cpy[ECHOMAX];
		strcpy(input_string_cpy, send_string);
		tokenizer(string_tokens, input_string_cpy);
		int tokens_number = atoi(string_tokens[3]);
		if(tokens_number < 3 || tokens_number > 3 || (!checkChar(string_tokens[0])) || isNumber(string_tokens[1]) || isNumber(string_tokens[2])){
			if(strcmp(string_tokens[0], "=") == 0){
				sendto(socket_udp, send_string, send_string_len, 0, (struct sockaddr*)&server_address, server_address_size);
				printf("%s\n", "Closing connection with server\n");
				break;
			}
			printf("%s\n", "You must send to server a valid operation");
			Sleep(1500);
			system("CLS");
			continue;
		}else{
			// Send data to the server
			int data_sent;
			data_sent = sendto(socket_udp, send_string, send_string_len, 0, (struct sockaddr*)&server_address, server_address_size);
			if (data_sent != send_string_len){
				errorHandler("Different number of bytes has been send to the server");
			}
			printf("%s\n", "Data sent successfully");

			// Retrieve data from server
			response_address_size = sizeof(response_address);
			memset(receive_string, 0, ECHOMAX);
			int receive_string_len;
			receive_string_len = recvfrom(socket_udp, receive_string, ECHOMAX, 0, (struct sockaddr*)&response_address, &response_address_size);
			if(response_address.sin_addr.s_addr != server_address.sin_addr.s_addr){
				fprintf(stderr, "Error: received a packet from an unknown source\n");
				return -1;
			}
			printf("%s\n", "Packet received correctly");

			if(receive_string_len < 0 || receive_string_len > ECHOMAX){
				errorHandler("Something went wrong receiving the packet");
			}

			char print_string[ECHOMAX];
			memset(print_string, 0, ECHOMAX);
			strcat(print_string, string_tokens[1]);
			strcat(print_string, string_tokens[0]);
			strcat(print_string, string_tokens[2]);
			printf("%s%s %s: %s%s%s", "Result received from server ", host_addr, serv_name, print_string, "=", receive_string);
			Sleep(3000);
			system("CLS");
		}
	}

	free(send_string);
	free(receive_string);
	closesocket(socket_udp);
	clearWinSock();
	printf("%s", "\n");
	system("PAUSE");

	return 0;
}


void clearWinSock(){
	#if defined WIN32
		WSACleanup();
	#endif
}

void errorHandler(char * string){
	printf("%s\n", string);
}

void tokenizer(char * tokens[4], char * string){
	char * operation = string;
	short temp = 0;
	char * token_string;
	token_string = strtok(operation, " ");

	if(!checkChar(token_string)){
		tokens[0] = "=";
		tokens[1] = NULL;
		tokens[2] = NULL;
		tokens[3] = "1";
	}else{
		while (token_string != NULL){
			tokens[temp] = token_string;
			temp++;
			token_string = strtok(NULL, " ");
		}
		if(temp == 3){
			int temp_var = temp;
			char str_temp_var[ECHOMAX];
			memset(str_temp_var, 0, ECHOMAX);
			itoa(temp_var, str_temp_var, 10);
			tokens[temp] = str_temp_var;
		}
	}
}

int checkChar(char * string){
	if(string[0] == '+' || string[0] == '-' || string[0] == 'x' || string[0] == '/'){
		return 1;
	}
	return 0;
}

int isNumber(char * string){
	int length = strlen(string);
	for (int i = 0; i < length; i++)
		if (!isdigit(string[i])){
			printf ("Entered input is not a number\n");
			return 1;;
		}

	return 0;
}
